1. Apply the Portworx operator:

2. Apply the Portworx spec:

3. When all the pods in the Portworx namespace have come up, check that the storage cluster is up via pxctl:

PX_POD=$(kubectl get pods -l name=portworx -n portworx -o jsonpath='{.items[0].metadata.name}')
kubectl exec $PX_POD -n kube-system -- /opt/pwx/bin/pxctl status

4. Activate the license for PX-DR:

kubectl exec $PX_POD -n kube-system -- /opt/pwx/bin/pxctl license activate <license_key>

5. Download the context for the GKE cluster:

gcloud container clusters get-credentials <cluster_name> --region <region> 

6. Get the list of contexts:

kubectl config get-contexts

7. Change context to that of the GKE cluster:

kubectl config use-context <gke_conext>

8. Create ClusterRoleBinding:

kubectl create clusterrolebinding myname-cluster-admin-binding \
    --clusterrole=cluster-admin --user=`gcloud info --format='value(config.account)'`

9. Deploy the Portworx operator:

10. In the portworx spec file for GKE add the following annotation:

portworx.io/service-type: portworx-api:LoadBalancer

11. Deploy portworx spec

12. Activate license for PX-DR:

PX_POD=$(kubectl get pods -l name=portworx -n portworx -o jsonpath='{.items[0].metadata.name}')
kubectl exec $PX_POD -n kube-system -- /opt/pwx/bin/pxctl license activate <license_key>

13. Follow the steps in this document to create the clusterpair object, note that this is
    generated on the destination cluster and then applied to the source cluster:

    https://docs.portworx.com/operations/operate-kubernetes/disaster-recovery/configure-migrations-to-use-service-accounts/

14. In the clusterpair YAML spec the server line with the IP address for the destination cluster does not need to include
    a port

15. After applying the clusterpair manifest using storkctl to obtain the status of the clusterpair:

    storkctl get clusterpair -n kube-system
